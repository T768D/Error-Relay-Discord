{
  "version": 3,
  "sources": ["..\\src\\main.ts"],
  "sourcesContent": [
    "import type { ChatInputCommandInteraction, Message, SendableChannels } from \"discord.js\";\r\n\r\ntype stages = \"formatting\" | \"logging\" | \"replying\";\r\n\r\n/**\r\n * You only need to create a new instance of the erorr handler once to set the channel. \r\n * After that just call the sendError function\r\n*/\r\nexport default class ErrorHandler {\r\n\r\n\t/**\r\n\t * @param {SendableChannels} channel The channel that the error message will be sent to\r\n\t*/\r\n\tconstructor(\r\n\t\t/**\r\n\t\t * @type {SendableChannels}\r\n\t\t * @description The channel that the error message will be sent to\r\n\t\t*/\r\n\t\tpublic channel: SendableChannels\r\n\t) { }\r\n\r\n\t/**\r\n\t * @param {unknown} err The error variable caught from the try catch, or a string detailing the error message\r\n\t * @param {Message | ChatInputCommandInteraction | undefined} message The interaction or message that will be replied to that caused the error\r\n\t * \r\n\t * @returns {Promise<[\"failed\", stages | \"undefinedParam\"] | \"logged\" | \"sucess\">} If failed, it returns [\"failed\", and the stage of failure].\r\n\t * Otherwise it returns either sucess for a full reply and log, or logged for just the log.\r\n\t*/\r\n\tpublic async sendError(err: unknown, message?: Message | ChatInputCommandInteraction): Promise<[\"failed\", stages | \"undefinedParam\"] | \"logged\" | \"sucess\"> {\r\n\t\tif (!err) return [\"failed\", \"undefinedParam\"] as const;\r\n\r\n\t\tlet stage: stages = \"formatting\";\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet formatted = \"\";\r\n\t\t\tconst arr = String(err instanceof Error ? err.stack : err)\r\n\t\t\t\t.replace(/\\(file:\\/\\/\\/.*\\/|C:\\\\.*\\\\/g, \"  workspace\\\\\")\r\n\t\t\t\t.replace(/\\( \\(|<anonymous>/g, \"\")\r\n\t\t\t\t.split(\"\\n\");\r\n\r\n\t\t\tfor (const item of arr) {\r\n\t\t\t\tif (!/node_modules|node:internal/.test(item))\r\n\t\t\t\t\tformatted += item + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\tstage = \"logging\";\r\n\t\t\tconsole.error(err);\r\n\t\t\tawait this.channel.send(formatted);\r\n\r\n\t\t\tif (!message) return \"logged\";\r\n\r\n\t\t\tstage = \"replying\";\r\n\r\n\t\t\tif (\"isChatInputCommand\" in message) {\r\n\r\n\t\t\t\tif (message.replied || message.deferred) {\r\n\t\t\t\t\tconst contents = await message.fetchReply();\r\n\t\t\t\t\tawait message.editReply({\r\n\t\t\t\t\t\tcontent: `## Something went wrong, the error has been logged. **The response below may be bugged or inaccurate** \\n\\n${contents.content}`,\r\n\t\t\t\t\t\tcomponents: []\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (message.isRepliable()) {\r\n\t\t\t\t\tawait message.reply({\r\n\t\t\t\t\t\tcontent: \"Something went wrong, the error has been logged\",\r\n\t\t\t\t\t\tflags: \"Ephemeral\",\r\n\t\t\t\t\t\tcomponents: []\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\telse {\r\n\t\t\t\tawait message.reply(\"Something went wrong, the error has been logged\");\r\n\t\t\t}\r\n\r\n\t\t\treturn \"sucess\";\r\n\t\t}\r\n\r\n\t\tcatch {\r\n\r\n\t\t\tif (stage === \"logging\") {\r\n\t\t\t\t// check if channel is right type etc\r\n\t\t\t}\r\n\r\n\t\t\treturn [\"failed\", stage];\r\n\t\t}\r\n\t}\r\n}"
  ],
  "mappings": ";ujBAQA,MAAqB,CAAa,CAUzB,QALR,WAAW,CAKH,EACN,CADM,oBAUK,UAAS,CAAC,EAAc,EAAuH,CAC3J,IAAK,EAAK,MAAO,CAAC,SAAU,gBAAgB,EAE5C,IAAI,EAAgB,aAEpB,GAAI,CAEH,IAAI,EAAY,GACV,EAAM,OAAO,aAAe,MAAQ,EAAI,MAAQ,CAAG,EACvD,QAAQ,8BAA+B,eAAe,EACtD,QAAQ,qBAAsB,EAAE,EAChC,MAAM;AAAA,CAAI,EAEZ,QAAW,KAAQ,EAClB,IAAK,6BAA6B,KAAK,CAAI,EAC1C,GAAa,EAAO;AAAA,EAOtB,GAJA,EAAQ,UACR,QAAQ,MAAM,CAAG,EACjB,MAAM,KAAK,QAAQ,KAAK,CAAS,GAE5B,EAAS,MAAO,SAIrB,GAFA,EAAQ,WAEJ,uBAAwB,GAE3B,GAAI,EAAQ,SAAW,EAAQ,SAAU,CACxC,IAAM,EAAW,MAAM,EAAQ,WAAW,EAC1C,MAAM,EAAQ,UAAU,CACvB,QAAS;AAAA;AAAA,EAA8G,EAAS,UAChI,WAAY,CAAC,CACd,CAAC,EAGG,QAAI,EAAQ,YAAY,EAC5B,MAAM,EAAQ,MAAM,CACnB,QAAS,kDACT,MAAO,YACP,WAAY,CAAC,CACd,CAAC,EAKF,WAAM,EAAQ,MAAM,iDAAiD,EAGtE,MAAO,SAGR,KAAM,CAML,MAAO,CAAC,SAAU,CAAK,GAG1B",
  "debugId": "B2975C6E3A33971664756E2164756E21",
  "names": []
}